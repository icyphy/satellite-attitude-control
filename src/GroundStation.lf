target C {
    //files: [ "./common.c" ]
    build-type: Debug,
}

import TcpSocketServer from "./TcpSocketServer.lf"
import WebSocketServer from "./WebSocketServer.lf"

preamble {=
#include "./common.h"
=}


reactor SatelitteConnection {
    socket = new TcpSocketServer(check_frequency=1sec, host="127.0.0.1", port=31812);

    output telemetry: Telemetry;


    reaction (socket.from_satelitte) -> telemetry {=
        MessageFromClient message = socket.from_satelitte->value;
        TcpMessage value = message.message;

        switch (value.descriptor) {
            case 0:
                assert(value.size >= sizeof(Telemetry));
                Telemetry telemetry_struct;
                memcpy(&telemetry_struct, value.message, sizeof(Telemetry));

                lf_set(telemetry, telemetry_struct);
                break;
            default:
                lf_print("unknown descriptor received %d", value.descriptor);
        }

        free(value.message);
    =}
}


main reactor {
    satallite_conntection = new SatelitteConnection();

    s = new WebSocketServer(
        hostport=8080,
        max_clients=2,  // Limit number of clients to 2.
        initial_file = {= LF_SOURCE_DIRECTORY LF_FILE_SEPARATOR "WebSocket.html" =})

    reaction(startup) {=
        lf_print("======== Starting server. Open WebSocket.html in your favorite browser.");
    =}

    reaction(satallite_conntection.telemetry) -> s.send {=
        double yaw = satallite_conntection.telemetry->value.yaw;
        double pitch = satallite_conntection.telemetry->value.pitch;
        double roll = satallite_conntection.telemetry->value.roll;
        double vel_yaw = satallite_conntection.telemetry->value.vel_yaw;
        double vel_pitch = satallite_conntection.telemetry->value.vel_pitch;
        double vel_roll = satallite_conntection.telemetry->value.vel_roll;

        unsigned long time = satallite_conntection.telemetry->value.time;

        //lf_print("telemetry angle: %lf angular velocity: %lf time: %ld", angle, angular_momentum, time);
        web_socket_message_t message; // = malloc(sizeof(web_socket_instance_t));

        message.message = malloc(300);
        message.wsi = NULL;
        int size = sprintf(message.message, "{\"yaw\": %lf, \"pitch\": %lf, \"roll\": %li, \"vel_yaw\": %lf, \"vel_pitch\": %lf, \"vel_roll\": %lf}", 
        yaw, pitch, roll, vel_yaw, vel_pitch, vel_roll, time);
        lf_print("json: %s", message.message);
        message.length = size;
        message.binary = false;
        message.next = NULL;

        lf_set(s.send, message);
        //lf_token_t* token = lf_new_token((lf_port_base_t*)s.send, (void*)message, 1);
        //lf_set_token(s.send, token);
    =}

  reaction(s.connected) {=
    if (s.connected->value.connected) {
      lf_print("======== Connected a new client");
    } else {
      lf_print("======== Disconnected client");
    }
  =}

  reaction(s.received) {=
    // NOTE: The WebSocketServer ensures that the received message is null terminated.
    lf_print("======== Application received: %s", (char*)s.received->value->message);
  =}

}