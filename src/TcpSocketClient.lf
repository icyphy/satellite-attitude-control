target C {
    files: [ "./common.h", "./common.c"],
    cmake-include: ["GroundStation.cmake"]
}

preamble {=

#ifndef PREAMBLE_TCP_SOCKET_CLIENT
#define PREAMBLE_TCP_SOCKET_CLIENT

#include <assert.h>
#include <stdbool.h>
#include <unistd.h>
#include <stdio.h>
#include <arpa/inet.h>
#include <sys/socket.h>
#include <fcntl.h>
#include	<sys/ioctl.h>

#include "common.h"

#endif //PREAMBLE_TCP_SOCKET_CLIENT
=}

reactor TcpSocketClient(check_frequency: time = 100 ms, host: {=const char*=} = "::1",  port: short = 50000) {
    timer t(0, check_frequency)
    state fd: int
    input to_ground: TcpMessage
    output from_ground: TcpMessage

    reaction (startup) {=
        struct sockaddr_in serv_addr;
        
        if ((self->fd = socket(AF_INET, SOCK_STREAM, 0)) < 0) {
            lf_print("\n Socket creation error \n");
            exit(1);
        }

        //fcntl(self->fd, F_SETFL, fcntl(self->fd, F_GETFL) | O_NONBLOCK);
     
        serv_addr.sin_family = AF_INET;
        serv_addr.sin_port = htons(self->port);
     
        if (inet_pton(AF_INET, self->host, &serv_addr.sin_addr) <= 0) {
            lf_print("\nInvalid address/ Address not supported \n");
            exit(1);
        }
     
        if (connect(self->fd, (struct sockaddr*)&serv_addr, sizeof(serv_addr)) < 0) {
            lf_print("\nConnection Failed \n");
            exit(1);
        }
    =}

    reaction (to_ground) {=
        uint32_t size = convert_if_necessary(to_ground->value.size);
        uint32_t descriptor = convert_if_necessary(to_ground->value.descriptor);
        char* data = to_ground->value.message;

        write(self->fd, &size, sizeof(size));
        write(self->fd, &descriptor, sizeof(descriptor));
        write(self->fd, data, to_ground->value.size);
    =}

    reaction (t) -> from_ground {=
        int bytes_available;
        ioctl(self->fd,FIONREAD,&bytes_available);

        if (bytes_available <= 8) {
            return;
        }

        const size_t BUFFER_SIZE = 4096;
        char* data = malloc(BUFFER_SIZE);
        uint32_t size, descriptor;

        int bytes_read;

        if (read(self->fd, &size, sizeof(uint32_t)) < 4) {
            // problem less then 4 bytes read

            lf_print("Error READ Size");
        };

        if (read(self->fd, &descriptor, sizeof(uint32_t)) < 4) {
            // problem less then 4 bytes read

            lf_print("Error READ Descriptor");
        };


        //descriptor = convert_if_necessary(descriptor);

        if (bytes_read = read(self->fd, data, size) < 0) {
            // problem returned -1

            lf_print("Error READ Data");
        };

        //assert(bytes_read == size); // missmatching amount of bytes read from what has been specified

        TcpMessage message;

        message.size = size;
        message.descriptor = descriptor;
        message.message = data;

        lf_set(from_ground, message); 
    =}

    reaction(shutdown) {=
        close(self->fd);
    =}
}
