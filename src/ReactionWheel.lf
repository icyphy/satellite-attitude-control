/**
 * @author Tassilo
 * @author Shaokai
 */


 target C {
    cmake-include: ["./mujoco.cmake"], // For desktop
    // cmake-include: ["./mujoco-rpi.cmake"], // For RPi4
    scheduler: STATIC,
    // workers: 1,
    // timeout: 810 weeks, // 15 years of lifetime
    // timeout: 1200 msec, // For testing
    timeout: 100 msec,
    /*
    single-threaded is required to start a GLFW window on macOS,
    since a window can only be spawned from the main thread.
    https://www.glfw.org/docs/3.3/intro_guide.html#thread_safety
    */
    // single-threaded: true,
    files: ["../models/3_axis_reaction_wheel.xml", "reaction_wheel.h"],
    build-type: Debug,
}

import MujocoSimulator from "./MujocoSimulator.lf";
import TcpSocketClient from "./TcpSocketClient.lf"

preamble {=
    #include "reaction_wheel.h"
    #include "common.h"
=}

/**
 * According to self site, gyroscopes operate at 6.6 kHz (i.e., with a period of ~152us).
 * https://support.sbg-systems.com/sc/imu/latest/user-manual/sampling-and-sensors-specifications
 */
reactor Gyroscope(period=10ms) {
    timer t(10ms, period)
    state value: float[3] = {0}

    input sim: float[3]
    output out: float[3]

    @wcet("100 usec")
    reaction(t) -> out {=
        out->value[0] = self->value[0];
        out->value[1] = self->value[1];
        out->value[2] = self->value[2];
        lf_set_present(out);
    =}

    @wcet("100 usec")
    reaction (sim) {=
        self->value[0] = sim->value[0];
        self->value[1] = sim->value[1];
        self->value[2] = sim->value[2];
    =}
}

/**
 * If the angular rate sensor is ADXRS300 from ANALOG DEVICES, then the sensor
 * resonant frequency is 14 kHz (i.e., with a period of ~72us).
 * https://www.analog.com/media/en/technical-documentation/data-sheets/ADXRS300.pdf
 */
reactor AngularRateSensor(period=10ms) {
    timer t(10ms, period)
    state value: float

    input sim: float
    output out: float

    @wcet("100 usec")
    reaction(t) -> out {=
        lf_set(out, self->value);
    =}

    @wcet("100 usec")
    reaction (sim) {=
        self->value = sim->value;
    =}
}
reactor Controller(period=100ms) {
    input current_angle: float[3]
    input current_speed: float
    input desired_angle: float[3]
    input sendCommand_in: bool

    state current_angle: float[3] = {0}
    state current_speed: float
    state desired_angle: float[3] = {0}
    state last_update: {=unsigned long=}
    state last_error: float[3] = {0}
    state error_accumulator: float

    output controll_signal: float[3]
    output sendCommand_out: bool
    output update_status: {=TcpMessage=}

    preamble {=
    #include <string.h>
    =}

    @wcet("100 usec")
    reaction(desired_angle) {=
        self->desired_angle = desired_angle->value;
    =}

    @wcet("100 usec")
    reaction(current_speed) {=
        self->current_speed = current_speed->value;
    
    =}   

    @wcet("100 usec")
    reaction(current_angle) -> sendCommand_out {=
        self->current_angle[0] = current_angle->value[0];
        self->current_angle[1] = current_angle->value[1];
        self->current_angle[2] = current_angle->value[2];
        lf_set_present(sendCommand_out);
    =}

    @wcet("20 ms")
    reaction(sendCommand_in) -> update_status, controll_signal {=
        // Send status to the data processing unit.
        Telemetry telemetry;
        
        telemetry.yaw = self->current_angle[0];
        telemetry.pitch = self->current_angle[1];
        telemetry.roll = self->current_angle[2];
        telemetry.vel_yaw = 0;
        telemetry.vel_pitch = 0;
        telemetry.vel_roll = 0;
        telemetry.time = lf_time_physical_elapsed();

        TcpMessage message;
        message.message = malloc(sizeof(Telemetry));
        memcpy(message.message, &telemetry, sizeof(Telemetry));
        message.size = sizeof(Telemetry);
        message.descriptor = 0;
        
        lf_print("send telemetry");
        lf_set(update_status, message);

        // Send control signals.
        const double i_controller_value = -12;
        const double p_controller_value = -8;
        const double d_controller_value = -1;

        if (self->last_update == 0.0){
            self->last_update = lf_time_physical();
            return;
        }
        
        unsigned long current_tag = (lf_time_physical());

        unsigned long time_diff = (current_tag - self->last_update);
        lf_print("T = %lu OT = %lu DT = %lu", current_tag, self->last_update, time_diff);
        double velocity_vector[3]; 
        velocity_vector[0] = (self->current_angle[0] - self->desired_angle[0])/( ((float)time_diff) * 0.000001 );
        velocity_vector[1] = (self->current_angle[1] - self->desired_angle[1])/( ((float)time_diff) * 0.000001 );
        velocity_vector[2] = (self->current_angle[2] - self->desired_angle[2])/( ((float)time_diff) * 0.000001 );
        double error[3];
        error[0] = (self->current_angle[0] - self->desired_angle[0]);
        error[1] = (self->current_angle[1] - self->desired_angle[1]);
        error[2] = (self->current_angle[2] - self->desired_angle[2]);

        controll_signal->value[0] =
              p_controller_value * velocity_vector[0]  // present component
            + i_controller_value * self->error_accumulator // integral component
            + d_controller_value * (self->last_error[0] - error[0]); // differential component
        // FIXME: Fill in the other two control signals.
        controll_signal->value[1] = 
              p_controller_value * velocity_vector[1]  // present component
            + i_controller_value * self->error_accumulator // integral component
            + d_controller_value * (self->last_error[1] - error[1]); // differential component
        controll_signal->value[2] = 
              p_controller_value * velocity_vector[2]  // present component
            + i_controller_value * self->error_accumulator // integral component
            + d_controller_value * (self->last_error[2] - error[2]); // differential component

        memcpy(self->last_error, error, sizeof(error));
        self->last_update = current_tag;
        self->error_accumulator = self->error_accumulator * 0.25 + error[0];
        
        lf_print("ANGLE = %f %f %f DESIRED ANGLE = %f %f %f MOTOR = %f %f %f", self->current_angle[0], self->current_angle[1], self->current_angle[2], self->desired_angle[0], self->desired_angle[1], self->desired_angle[2], controll_signal->value[0], controll_signal->value[1], controll_signal->value[2]);

        lf_set_present(controll_signal);
    =} 

    @wcet("100 ms")
    reaction(shutdown) {==}
}
/**
 * We would likely use a stepper motor here. A closed loop stepper driver can
 * have a maximum driver pulse input frequency of 200 kHz (i.e., a period of 5 usec!).
 * https://www.amazon.com/gp/product/B08Q79YTQW/ref=ppx_yo_dt_b_search_asin_title?ie=UTF8&psc=1
 */
// reactor Motor(freq: float=1000.0) {
//     input in:float
//     output out: float;
    
//     @wcet("25 usec")
//     reaction(in) -> out {=
//         lf_set(out, in->value);
//     =}
// }

reactor UserInput {
    // For some reason declaring the angles in the preamble segfaults.
    // preamble {=
    //     float ANGLE_1[3] = {1.0, 0.5, 0.2};
    //     float ANGLE_2[3] = {-2.0, 0, 0};
    // =}

    output desired_angle: float[3];

    state ANGLE_1 : float[3] = {1.0, 0.5, 0.2}
    state ANGLE_2 : float[3] = {-2.0, 0, 0}

    @wcet("25 usec")
    reaction(startup) -> desired_angle {=
        desired_angle->value[0] = self->ANGLE_1[0];
        desired_angle->value[1] = self->ANGLE_1[1];
        desired_angle->value[2] = self->ANGLE_1[2];
        lf_set_present(desired_angle);
    =}
}

reactor SimulatorInterface {
    // interfacing with mujoco simulator
    output simulator_ctrl: float[3];
    input simulator_output: mjData_ptr;

    // interfacing with sensors
    output sensor_value_gyro: float[3];
    output sensor_value_ars: float;

    // FIXME: Sharing a pointer this way seems to cause double free.
    // How to prevent this from happening?
    input model_pointer: mjModel_ptr;

    // interfacing with controller
    input controller_output: float[3];

    state model: mjModel_ptr;
    state motor_output: float[3] = {0};
    state file0: FILE*;
    state file1: FILE*;
    state file2: FILE*;

    @wcet("50 ms")
    reaction (startup) {=
        self->file0 = fopen("data0.csv", "w+");
        self->file1 = fopen("data1.csv", "w+");
        self->file2 = fopen("data2.csv", "w+");
        if (self->file0 == NULL) {
            lf_print_error_and_exit("file0 cannot be opened");
        }
        if (self->file1 == NULL) {
            lf_print_error_and_exit("file1 cannot be opened");
        }
        if (self->file2 == NULL) {
            lf_print_error_and_exit("file2 cannot be opened");
        }
        fprintf(self->file0,"time, platform_angle, joint_velocity\n");
        fprintf(self->file1,"time, platform_angle, joint_velocity\n");
        fprintf(self->file2,"time, platform_angle, joint_velocity\n");
    =}

    /**
     * Save the pointer to mjModel. This only happens at the first tag.
     */
    @wcet("50 usec")
    reaction(model_pointer) {=
        self->model = model_pointer->value;
        lf_print("self->model = %p", self->model);
    =}

    @wcet("50 usec")
    reaction (controller_output) {=
        self->motor_output[0] = controller_output->value[0];
        self->motor_output[1] = controller_output->value[1];
        self->motor_output[2] = controller_output->value[2];
    =}

    @wcet("50 ms")
    reaction (simulator_output) -> sensor_value_ars, sensor_value_gyro, simulator_ctrl {=
        mjData* simulation = simulator_output->value;

        // Get sensor indices.
        int wheel0_pos = mj_name2id(self->model, mjOBJ_SENSOR, "wheel0_pos");
        int wheel0_vel = mj_name2id(self->model, mjOBJ_SENSOR, "wheel0_vel");
        int wheel1_pos = mj_name2id(self->model, mjOBJ_SENSOR, "wheel1_pos");
        int wheel1_vel = mj_name2id(self->model, mjOBJ_SENSOR, "wheel1_vel");
        int wheel2_pos = mj_name2id(self->model, mjOBJ_SENSOR, "wheel2_pos");
        int wheel2_vel = mj_name2id(self->model, mjOBJ_SENSOR, "wheel2_vel");
        
        // FIXME: Write to other files too.
        fprintf(self->file0, "%f, %f, %f\n", simulation->time * 1000.0, simulation->sensordata[wheel0_pos], simulation->sensordata[wheel0_vel]);
        fprintf(self->file1, "%f, %f, %f\n", simulation->time * 1000.0, simulation->sensordata[wheel1_pos], simulation->sensordata[wheel1_vel]);
        fprintf(self->file2, "%f, %f, %f\n", simulation->time * 1000.0, simulation->sensordata[wheel2_pos], simulation->sensordata[wheel2_vel]);

        sensor_value_gyro->value[0] = simulation->sensordata[wheel0_pos];
        sensor_value_gyro->value[1] = simulation->sensordata[wheel1_pos];
        sensor_value_gyro->value[2] = simulation->sensordata[wheel2_pos];
        lf_set_present(sensor_value_gyro);
        
        simulator_ctrl->value[0] = self->motor_output[0];
        simulator_ctrl->value[1] = self->motor_output[1];
        simulator_ctrl->value[2] = self->motor_output[2];
        lf_set_present(simulator_ctrl);
    =}

    @wcet("50 ms")
    reaction (shutdown) {=
        fclose(self->file0);
        fclose(self->file1);
        fclose(self->file2);
    =}
}

main reactor {
    sim = new MujocoSimulator(file="models/3_axis_reaction_wheel.xml");
    ars = new AngularRateSensor()
    gyro = new Gyroscope()
    controller = new Controller()
    user_input = new UserInput()
    file = new SimulatorInterface()
    tcpClient = new TcpSocketClient(host="127.0.0.1", port=31812);
    // tcpClient = new TcpSocketClient(host="192.168.123.111", port=31812);

    // interfacing with controller
    sim.model_pointer -> file.model_pointer
    sim.call_controller -> file.simulator_output
    file.simulator_ctrl -> sim.return_controller

    // user input controller
    user_input.desired_angle -> controller.desired_angle;

    // feeding sensor values
    file.sensor_value_ars ->  ars.sim;
    file.sensor_value_gyro -> gyro.sim; 

    // sensor values to controller
    gyro.out -> controller.current_angle
    ars.out -> controller.current_speed

    // forwarding controll output from the controller to the mujoco inteface
    controller.controll_signal -> file.controller_output
    controller.sendCommand_out -> controller.sendCommand_in
    controller.update_status -> tcpClient.to_ground
}

