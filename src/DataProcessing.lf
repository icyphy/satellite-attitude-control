/**
 * This program runs on the ODROID-XU4.
 */
target C {
    //files: [ "./common.c" ],
    scheduler: STATIC,
    build-type: Debug,
}

import TcpSocketServer from "./TcpSocketServer.lf"

preamble {=
#include "common.h"
=}

reactor Process {
  input from_reactionWheel: MessageFromClient;
  input telemetry_in: Telemetry;
  output telemetry_out: Telemetry;

  reaction (from_reactionWheel) -> telemetry_out {=
    MessageFromClient message = from_reactionWheel->value;
    TcpMessage value = message.message;

    switch (value.descriptor) {
      case 0:
        assert(value.size >= sizeof(Telemetry));
        Telemetry telemetry_struct;
        memcpy(&telemetry_struct, value.message, sizeof(Telemetry));

        lf_set(telemetry_out, telemetry_struct);
        break;
      default:
        lf_print("unknown descriptor received %d", value.descriptor);
    }

    free(value.message);
  =}

  reaction(telemetry_in) {=
    double yaw = telemetry_in->value.yaw;
    double pitch = telemetry_in->value.pitch;
    double roll = telemetry_in->value.roll;
    double vel_yaw = telemetry_in->value.vel_yaw;
    double vel_pitch = telemetry_in->value.vel_pitch;
    double vel_roll = telemetry_in->value.vel_roll;
    unsigned long time = telemetry_in->value.time;
    lf_print("[Telemetry] yaw: %lf, vel_yaw: %f, pitch: %lf, vel_pitch: %f, roll: %lf, vel_roll: %f, time: %lld", yaw, vel_yaw, pitch, vel_pitch, roll, vel_roll, time);
  =}
}


main reactor {
  process = new Process()
  socket = new TcpSocketServer(host="127.0.0.1", port=31812);
  // socket = new TcpSocketServer(host="192.168.123.111", port=31812);
  process.telemetry_out -> process.telemetry_in
  socket.from_satelitte -> process.from_reactionWheel
}